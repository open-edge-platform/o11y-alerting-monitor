// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/alerts)
	GetProjectAlerts(ctx echo.Context, params GetProjectAlertsParams) error

	// (GET /api/v1/alerts/definitions)
	GetProjectAlertDefinitions(ctx echo.Context) error

	// (GET /api/v1/alerts/definitions/{alertDefinitionID})
	GetProjectAlertDefinition(ctx echo.Context, alertDefinitionID AlertDefinitionId) error

	// (PATCH /api/v1/alerts/definitions/{alertDefinitionID})
	PatchProjectAlertDefinition(ctx echo.Context, alertDefinitionID AlertDefinitionId) error

	// (GET /api/v1/alerts/definitions/{alertDefinitionID}/template)
	GetProjectAlertDefinitionRule(ctx echo.Context, alertDefinitionID AlertDefinitionId, params GetProjectAlertDefinitionRuleParams) error

	// (GET /api/v1/alerts/receivers)
	GetProjectAlertReceivers(ctx echo.Context) error

	// (GET /api/v1/alerts/receivers/{receiverID})
	GetProjectAlertReceiver(ctx echo.Context, receiverID ReceiverId) error

	// (PATCH /api/v1/alerts/receivers/{receiverID})
	PatchProjectAlertReceiver(ctx echo.Context, receiverID ReceiverId) error

	// (GET /api/v1/status)
	GetServiceStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProjectAlerts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlerts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectAlertsParams
	// ------------- Optional query parameter "alert" -------------

	err = runtime.BindQueryParameter("form", true, false, "alert", ctx.QueryParams(), &params.Alert)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alert: %s", err))
	}

	// ------------- Optional query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, false, "host", ctx.QueryParams(), &params.Host)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host: %s", err))
	}

	// ------------- Optional query parameter "cluster" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster", ctx.QueryParams(), &params.Cluster)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster: %s", err))
	}

	// ------------- Optional query parameter "app" -------------

	err = runtime.BindQueryParameter("form", true, false, "app", ctx.QueryParams(), &params.App)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app: %s", err))
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "suppressed" -------------

	err = runtime.BindQueryParameter("form", true, false, "suppressed", ctx.QueryParams(), &params.Suppressed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter suppressed: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlerts(ctx, params)
	return err
}

// GetProjectAlertDefinitions converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlertDefinitions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlertDefinitions(ctx)
	return err
}

// GetProjectAlertDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlertDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alertDefinitionID" -------------
	var alertDefinitionID AlertDefinitionId

	err = runtime.BindStyledParameterWithOptions("simple", "alertDefinitionID", ctx.Param("alertDefinitionID"), &alertDefinitionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alertDefinitionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlertDefinition(ctx, alertDefinitionID)
	return err
}

// PatchProjectAlertDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectAlertDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alertDefinitionID" -------------
	var alertDefinitionID AlertDefinitionId

	err = runtime.BindStyledParameterWithOptions("simple", "alertDefinitionID", ctx.Param("alertDefinitionID"), &alertDefinitionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alertDefinitionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectAlertDefinition(ctx, alertDefinitionID)
	return err
}

// GetProjectAlertDefinitionRule converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlertDefinitionRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alertDefinitionID" -------------
	var alertDefinitionID AlertDefinitionId

	err = runtime.BindStyledParameterWithOptions("simple", "alertDefinitionID", ctx.Param("alertDefinitionID"), &alertDefinitionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alertDefinitionID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectAlertDefinitionRuleParams
	// ------------- Optional query parameter "rendered" -------------

	err = runtime.BindQueryParameter("form", true, false, "rendered", ctx.QueryParams(), &params.Rendered)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rendered: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlertDefinitionRule(ctx, alertDefinitionID, params)
	return err
}

// GetProjectAlertReceivers converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlertReceivers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlertReceivers(ctx)
	return err
}

// GetProjectAlertReceiver converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectAlertReceiver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "receiverID" -------------
	var receiverID ReceiverId

	err = runtime.BindStyledParameterWithOptions("simple", "receiverID", ctx.Param("receiverID"), &receiverID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter receiverID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectAlertReceiver(ctx, receiverID)
	return err
}

// PatchProjectAlertReceiver converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectAlertReceiver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "receiverID" -------------
	var receiverID ReceiverId

	err = runtime.BindStyledParameterWithOptions("simple", "receiverID", ctx.Param("receiverID"), &receiverID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter receiverID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectAlertReceiver(ctx, receiverID)
	return err
}

// GetServiceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetServiceStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/alerts", wrapper.GetProjectAlerts)
	router.GET(baseURL+"/api/v1/alerts/definitions", wrapper.GetProjectAlertDefinitions)
	router.GET(baseURL+"/api/v1/alerts/definitions/:alertDefinitionID", wrapper.GetProjectAlertDefinition)
	router.PATCH(baseURL+"/api/v1/alerts/definitions/:alertDefinitionID", wrapper.PatchProjectAlertDefinition)
	router.GET(baseURL+"/api/v1/alerts/definitions/:alertDefinitionID/template", wrapper.GetProjectAlertDefinitionRule)
	router.GET(baseURL+"/api/v1/alerts/receivers", wrapper.GetProjectAlertReceivers)
	router.GET(baseURL+"/api/v1/alerts/receivers/:receiverID", wrapper.GetProjectAlertReceiver)
	router.PATCH(baseURL+"/api/v1/alerts/receivers/:receiverID", wrapper.PatchProjectAlertReceiver)
	router.GET(baseURL+"/api/v1/status", wrapper.GetServiceStatus)

}
